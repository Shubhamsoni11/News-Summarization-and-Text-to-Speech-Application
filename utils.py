{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fa8665a0-931f-43c3-bfe1-b65c5bc1d1e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "from textblob import TextBlob\n",
    "from collections import Counter\n",
    "from gtts import gTTS\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "df2af142-8f33-4858-9c1b-397c03154b16",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to C:\\Users\\HP/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download(\"punkt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "803e7d62-a0b5-42c2-898f-79157311f30d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package vader_lexicon to\n",
      "[nltk_data]     C:\\Users\\HP/nltk_data...\n",
      "[nltk_data]   Package vader_lexicon is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download(\"vader_lexicon\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "0d5525f8-65ba-4908-9a58-a9e049a05217",
   "metadata": {},
   "outputs": [],
   "source": [
    "from nltk.sentiment import SentimentIntensityAnalyzer\n",
    "import nltk\n",
    "import spacy\n",
    "\n",
    "# Load spaCy English model\n",
    "nlp = spacy.load(\"en_core_web_sm\")\n",
    "\n",
    "# Function to extract keywords using spaCy\n",
    "def extract_keywords(text, top_n=5):\n",
    "    doc = nlp(text)\n",
    "    keywords = [token.text for token in doc if token.is_alpha and not token.is_stop]  # Remove stopwords\n",
    "    keywords = list(dict.fromkeys(keywords))  # Remove duplicates while keeping order\n",
    "    return keywords[:top_n]  # Return top N keywords\n",
    "\n",
    "# Scraper for Economic Times\n",
    "def scrape_economic_times(company):\n",
    "    url = f\"https://economictimes.indiatimes.com/topic/{company}\"\n",
    "    headers = {\"User-Agent\": \"Mozilla/5.0\"}\n",
    "\n",
    "    response = requests.get(url, headers=headers)\n",
    "    if response.status_code != 200:\n",
    "        print(f\"Failed to retrieve page. Status Code: {response.status_code}\")\n",
    "        return []\n",
    "\n",
    "    soup = BeautifulSoup(response.text, \"html.parser\")\n",
    "    articles = []\n",
    "\n",
    "    article_blocks = soup.find_all(\"div\", class_=\"clr flt topicstry story_list\")[:10]\n",
    "\n",
    "    for article in article_blocks:\n",
    "        title_tag = article.find(\"a\", class_=\"wrapLines l2\")\n",
    "        summary_tag = article.find(\"p\", class_=\"wrapLines l3\")\n",
    "\n",
    "        title = title_tag.text.strip() if title_tag else \"Title not found\"\n",
    "        summary = summary_tag.text.strip() if summary_tag else \"Summary not found\"\n",
    "        topics = extract_keywords(summary)\n",
    "\n",
    "        articles.append({\"title\": title, \"summary\": summary, \"topics\": topics})\n",
    "\n",
    "    return articles\n",
    "\n",
    "# Scraper for MoneyControl\n",
    "def scrape_moneycontrol(company):\n",
    "    search_url = f\"https://www.moneycontrol.com/news/tags/{company}.html\"\n",
    "    headers = {\"User-Agent\": \"Mozilla/5.0\"}\n",
    "\n",
    "    response = requests.get(search_url, headers=headers)\n",
    "    if response.status_code != 200:\n",
    "        print(f\"Failed to retrieve MoneyControl news. Status Code: {response.status_code}\")\n",
    "        return []\n",
    "\n",
    "    soup = BeautifulSoup(response.text, \"html.parser\")\n",
    "    articles = []\n",
    "\n",
    "    article_blocks = soup.find_all(\"li\", class_=\"clearfix\")[:10]\n",
    "\n",
    "    for article in article_blocks:\n",
    "        title_tag = article.find(\"h2\")\n",
    "        summary_tag = article.find(\"p\")\n",
    "\n",
    "        title = title_tag.text.strip() if title_tag else \"Title not found\"\n",
    "        summary = summary_tag.text.strip() if summary_tag else \"Summary not found\"\n",
    "        topics = extract_keywords(summary)\n",
    "\n",
    "        articles.append({\"title\": title, \"summary\": summary, \"topics\": topics})\n",
    "\n",
    "    return articles\n",
    "\n",
    "# Function to combine results from both sources\n",
    "def scrape_news(company):\n",
    "    economic_times_news = scrape_economic_times(company)\n",
    "    moneycontrol_news = scrape_moneycontrol(company)\n",
    "\n",
    "    all_articles = economic_times_news + moneycontrol_news\n",
    "    return all_articles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7149bbd6-393a-4fca-bcae-dfa4406cd805",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1. Title: Jimmy Kimmel faces backlash after he mocked Elon Musk and joked about Tesla vehicles being burnt, critics call for his ouster; has he dumped X with 11 million followers\n",
      "   Summary: Jimmy Kimmel is under fire for making jokes about recent arson attacks on Tesla vehicles and mocking Elon Musk. Critics, including politicians, are calling for ABC and Disney to take action against Kimmel. The criticism highlights perceived liberal bias at ABC, a network owned by Disney. Elon Musk and others have condemned Kimmel’s comments.\n",
      "   Topics: Jimmy, Kimmel, fire, making, jokes\n",
      "   Sentiment: Negative\n",
      "\n",
      "2. Title: Was Elon Musk really a Tesla co-founder? How he became synonymous with the brand\n",
      "   Summary: Elon Musk is widely recognized as the visionary behind Tesla. However, the company was originally founded by Martin Eberhard and Marc Tarpenning. Musk joined later, led a major investment, and used strategic moves and legal maneuvers to rewrite the narrative and establish himself as a co-founder. His public relations tactics ensured he remains the face of Tesla.\n",
      "   Topics: Elon, Musk, widely, recognized, visionary\n",
      "   Sentiment: Positive\n",
      "\n",
      "3. Title: Elon Musk tells Tesla staff future is ‘bright’; urges them to hold on to stock\n",
      "   Summary: The car maker Tesla’s stock has fallen nearly 50% from its peak in December. Tesla is facing backlash because of Musk’s role in President Donald Trump’s administration as head of the newly-formed Department of Government Efficiency (DOGE), where he has shut down several federal agencies, a move that has sparked protests.\n",
      "   Topics: car, maker, Tesla, stock, fallen\n",
      "   Sentiment: Negative\n",
      "\n",
      "4. Title: Tesla's All-Hands-Meet at 10 PM had employees worried and confused; here's what Elon Musk said at the meeting\n",
      "   Summary: Tesla employees were left surprised by an unexpected all-hands meeting last Thursday night. Held at 9:30 pm ET, the meeting caused confusion and frustration due to its timing and lack of advance notice. During the meeting, CEO Elon Musk updated employees on Tesla's recent achievements and addressed challenges, including falling stock prices and ongoing protests at sales centers.\n",
      "   Topics: Tesla, employees, left, surprised, unexpected\n",
      "   Sentiment: Negative\n",
      "\n",
      "5. Title: Hang on to stock: Tesla CEO Elon Musk to staff\n",
      "   Summary: During an all-hands meeting broadcast Thursday on X, he said, \"If you read the news, it feels like Armageddon.\" Musk joked he can't walk past a television without seeing a Tesla on fire, then mocked his detractors. \"I understand if you don't want to buy our product, but you don't have to burn it down. That's a bit unreasonable.\"\n",
      "   Topics: hands, meeting, broadcast, Thursday, X\n",
      "   Sentiment: Neutral\n",
      "\n",
      "6. Title: Top analyst Dan Ives sounds alarm, says Tesla’s crisis is here, urges Elon Musk to ditch DOGE and refocus on saving the brand\n",
      "   Summary: Wedbush Securities' top analyst Dan Ives urges Tesla CEO Elon Musk to focus on leading the company amid its current crisis. Ives warns that Tesla's image is being damaged by Musk's involvement in politics and the brand is facing significant challenges. He believes Musk's return to leadership is essential to resolving the crisis.\n",
      "   Topics: Wedbush, Securities, analyst, Dan, Ives\n",
      "   Sentiment: Negative\n",
      "\n",
      "7. Title: New day, new problem: Tesla owners ditch EVs in record numbers as Elon Musk’s political ties with Donald Trump spark controversy\n",
      "   Summary: Tesla trade-ins hit record highs as Elon Musk’s Trump advisory role sparks backlash. Explore the surge in used EV depreciation, protests over political ties, and how brand loyalty shifts amid Tesla’s market saturation and vandalism incidents.\n",
      "   Topics: Tesla, trade, ins, hit, record\n",
      "   Sentiment: Positive\n",
      "\n",
      "8. Title: Anti-Tesla protestors to face unprecedented consequences? Trump's blunt warning sparks buzz\n",
      "   Summary: Amid a wave of attacks on Tesla's dealerships and vehicles, President Donald Trump has come out in support of his key ally and DOGE chief Elon Musk. Trump has issued a very strict warning for those who are found convicted in Tesla violence case. Several Tesla dealerships around the country have been vandalized in recent weeks and the company's stock price has plummeted over the past month.\n",
      "   Topics: Amid, wave, attacks, Tesla, dealerships\n",
      "   Sentiment: Negative\n",
      "\n",
      "9. Title: Elon Musk juggles Tesla, Trump ties & stock woes as he attempts to rally the troops—Is it time for a new CEO?\n",
      "   Summary: Tesla CEO Elon Musk addressed employees in an impromptu all-hands meeting amid mounting concerns over his leadership and the company’s performance. Facing a sharp stock decline and increasing scrutiny, Musk reassured employees about Tesla’s future, championing its AI, robotics, and autonomous vehicle projects. He dismissed criticism, joked about Tesla cars being set on fire, and urged investors to hold onto their stock.\n",
      "   Topics: Tesla, CEO, Elon, Musk, addressed\n",
      "   Sentiment: Positive\n",
      "\n",
      "10. Title: 'Up to 20 years in jail for vandalising Teslas': Donald Trump revs ups warnings to attackers, 'financial backers'\n",
      "   Summary: US President Donald Trump has warned that individuals involved in sabotaging Teslas could face up to 20 years in prison. This statement comes amidst a series of attacks on Tesla properties in left-leaning cities, which investigators believe may be organized and funded by left-wing entities.\n",
      "   Topics: President, Donald, Trump, warned, individuals\n",
      "   Sentiment: Negative\n",
      "\n",
      "11. Title: Tesla’s retail fans buy the stock at a pace never seen before\n",
      "   Summary: The company has long had an ardent fan base of individual investors who hang on Musk’s every word on X, the social-media platform he owns\n",
      "   Topics: company, long, ardent, fan, base\n",
      "   Sentiment: Positive\n",
      "\n",
      "12. Title: Not Tesla, this company is now Elon Musk's most valuable asset\n",
      "   Summary: Musk’s SpaceX shares are valued at $147 billion, which is $20 billion more than his Tesla stakes. The value of Tesla stocks has eroded significantly since market rout since December.\n",
      "   Topics: Musk, SpaceX, shares, valued, billion\n",
      "   Sentiment: Positive\n",
      "\n",
      "13. Title: Tesla recalls most Cybertrucks due to trim detaching from vehicle\n",
      "   Summary: The recall covers just over 46,000 vehicles built from November 2023 through Feb. 27 of this year, Tesla said in a filing with the National Highway Traffic Safety Administration\n",
      "   Topics: recall, covers, vehicles, built, November\n",
      "   Sentiment: Positive\n",
      "\n",
      "14. Title: Elon Musk on his gruelling schedule: ‘I work almost every waking hour’\n",
      "   Summary: Elon Musk revealed his intense work routine, saying he sleeps six hours and works nearly every waking moment, even eating during meetings, leaving little room for social life or personal time.\n",
      "   Topics: Elon, Musk, revealed, intense, work\n",
      "   Sentiment: Positive\n",
      "\n",
      "15. Title: Elon Musk on Tesla’s rise: ‘I had to master manufacturing’\n",
      "   Summary: Elon Musk claims he mastered manufacturing out of necessity, not design. Speaking on Verdict with Ted Cruz, he revealed Tesla initially planned to outsource production but had to shift in-house due to unreliable partners.\n",
      "   Topics: Elon, Musk, claims, mastered, manufacturing\n",
      "   Sentiment: Positive\n",
      "\n",
      "16. Title: Violent attacks on Tesla dealerships spike as Musk takes prominent role in Trump White House\n",
      "   Summary: In Las Vegas, several Tesla vehicles were set ablaze early Tuesday outside a Tesla service center where the word “resist” was also painted in red across the building’s front doors.\n",
      "   Topics: Las, Vegas, Tesla, vehicles, set\n",
      "   Sentiment: Neutral\n",
      "\n",
      "17. Title: Tesla stock slapped down by Chinese rival’s ‘game changer’ tech\n",
      "   Summary: Shares of Tesla tumbled as much as 6.6% while BYD Co. shot to an all-time high after unveiling an electric car that can be charged as quickly as a gas vehicle is refueled\n",
      "   Topics: Shares, Tesla, tumbled, BYD, shot\n",
      "   Sentiment: Positive\n",
      "\n",
      "18. Title: How BYD’s five-minute charges compare with competitors\n",
      "   Summary: From “more features for no more price” and “smart driving for all,” BYD can now add “charging as fast as refueling” to its marketing slogans\n",
      "   Topics: features, price, smart, driving, BYD\n",
      "   Sentiment: Negative\n",
      "\n",
      "19. Title: Tesla’s stock decline fuels $16.2 bn in hedge fund short seller profits\n",
      "   Summary: Hedge fund short sellers have gained $16.2 billion as Tesla's stock value halved over three months, driven by falling sales, Elon Musk's political controversies, and economic uncertainty\n",
      "   Topics: Hedge, fund, short, sellers, gained\n",
      "   Sentiment: Positive\n",
      "\n",
      "20. Title: Mercedes unveils entry-level electric sedan in swipe at Tesla\n",
      "   Summary: \n",
      "   Topics: \n",
      "   Sentiment: Neutral\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "sia = SentimentIntensityAnalyzer()\n",
    "\n",
    "# Function to analyze sentiment\n",
    "def analyze_sentiment(text):\n",
    "    sentiment_score = sia.polarity_scores(text)[\"compound\"]  # Get compound score\n",
    "    if sentiment_score > 0.05:\n",
    "        return \"Positive\"\n",
    "    elif sentiment_score < -0.05:\n",
    "        return \"Negative\"\n",
    "    else:\n",
    "        return \"Neutral\"\n",
    "\n",
    "# Modify the scraping function to include sentiment analysis\n",
    "def scrape_news_with_sentiment(company):\n",
    "    all_articles = scrape_news(company)  # Get scraped news articles\n",
    "    \n",
    "    # Add sentiment analysis to each article\n",
    "    for article in all_articles:\n",
    "        article[\"sentiment\"] = analyze_sentiment(article[\"summary\"])\n",
    "    \n",
    "    return all_articles\n",
    "\n",
    "# Example Usage\n",
    "company_name = \"Tesla\"\n",
    "all_news = scrape_news_with_sentiment(company_name)\n",
    "\n",
    "for idx, article in enumerate(all_news, 1):\n",
    "    print(f\"{idx}. Title: {article['title']}\")\n",
    "    print(f\"   Summary: {article['summary']}\")\n",
    "    print(f\"   Topics: {', '.join(article['topics'])}\")\n",
    "    print(f\"   Sentiment: {article['sentiment']}\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5dee1fc4-aefb-4de5-a5a4-e67c08096e3b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Comparative Sentiment Analysis:\n",
      "Positive Articles: 1\n",
      "Negative Articles: 1\n",
      "Neutral Articles: 0\n",
      "The news coverage is balanced between positive and negative articles.\n"
     ]
    }
   ],
   "source": [
    "from textblob import TextBlob\n",
    "from nltk.sentiment import SentimentIntensityAnalyzer\n",
    "\n",
    "# Initialize VADER sentiment analyzer\n",
    "sia = SentimentIntensityAnalyzer()\n",
    "\n",
    "def analyze_sentiment(text):\n",
    "    \"\"\"Compute sentiment scores using TextBlob and VADER.\"\"\"\n",
    "    textblob_score = TextBlob(text).sentiment.polarity  # Range: [-1, 1]\n",
    "    vader_score = sia.polarity_scores(text)[\"compound\"]  # Range: [-1, 1]\n",
    "    \n",
    "    return {\n",
    "        \"textblob_score\": textblob_score,\n",
    "        \"vader_score\": vader_score,\n",
    "        \"overall_sentiment\": \"Positive\" if vader_score > 0 else \"Negative\" if vader_score < 0 else \"Neutral\"\n",
    "    }\n",
    "\n",
    "def analyze_articles(articles):\n",
    "    \"\"\"Applies sentiment analysis to the first 10 news articles.\"\"\"\n",
    "    selected_articles = articles[:10]  # Ensure only first 10 articles are analyzed\n",
    "    for article in selected_articles:\n",
    "        sentiment_result = analyze_sentiment(article[\"summary\"])\n",
    "        article[\"sentiment\"] = sentiment_result\n",
    "    return selected_articles\n",
    "\n",
    "def comparative_analysis(articles):\n",
    "    \"\"\"Performs comparative sentiment analysis across 10 articles.\"\"\"\n",
    "    sentiment_counts = Counter(article[\"sentiment\"][\"overall_sentiment\"] for article in articles)\n",
    "    \n",
    "    print(\"\\nComparative Sentiment Analysis:\")\n",
    "    print(f\"Positive Articles: {sentiment_counts['Positive']}\")\n",
    "    print(f\"Negative Articles: {sentiment_counts['Negative']}\")\n",
    "    print(f\"Neutral Articles: {sentiment_counts['Neutral']}\")\n",
    "    \n",
    "    if sentiment_counts['Positive'] > sentiment_counts['Negative']:\n",
    "        print(\"Overall, the news coverage is more positive.\")\n",
    "    elif sentiment_counts['Negative'] > sentiment_counts['Positive']:\n",
    "        print(\"Overall, the news coverage is more negative.\")\n",
    "    else:\n",
    "        print(\"The news coverage is balanced between positive and negative articles.\")\n",
    "\n",
    "# Integration with Scraper\n",
    "def scrape_news_with_sentiment(company, scraper_function):\n",
    "    \"\"\"Scrape news and perform sentiment analysis.\"\"\"\n",
    "    all_articles = scraper_function(company)  # Get scraped news articles\n",
    "    \n",
    "    analyzed_articles = analyze_articles(all_articles)\n",
    "    comparative_analysis(analyzed_articles)\n",
    "    \n",
    "    return analyzed_articles\n",
    "\n",
    "# Example Usage:\n",
    "scraped_articles = [\n",
    "    {\"title\": \"Company stock surges\", \"summary\": \"The company's stock performed exceptionally well despite market fluctuations.\"},\n",
    "    {\"title\": \"Company faces losses\", \"summary\": \"The company reported significant losses this quarter due to economic downturn.\"},\n",
    "    # Add more articles here...\n",
    "]\n",
    "\n",
    "analyzed_articles = analyze_articles(scraped_articles)\n",
    "comparative_analysis(analyzed_articles)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "d32e2dec-733f-4bb0-aecd-8b9ce1382bac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'news_audio.mp3'"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "def text_to_speech(text, filename=\"news_audio.mp3\"):\n",
    "    \"\"\"Convert text summary to Hindi speech.\"\"\"\n",
    "    gTTS(text=text, lang=\"hi\", slow=False).save(filename)\n",
    "    os.system(f\"start {filename}\")\n",
    "    return filename\n",
    "\n",
    "# Example Usage:\n",
    "sample_text = \"The company's stock performed exceptionally well despite market fluctuations.\"\n",
    "text_to_speech(sample_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6677efb8-e304-4c34-9328-c6946037d73f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running on local URL:  http://127.0.0.1:7863\n",
      "\n",
      "To create a public link, set `share=True` in `launch()`.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><iframe src=\"http://127.0.0.1:7863/\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": []
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import gradio as gr\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "from textblob import TextBlob\n",
    "from nltk.sentiment import SentimentIntensityAnalyzer\n",
    "from gtts import gTTS\n",
    "import spacy\n",
    "import feedparser\n",
    "\n",
    "# Load spaCy model for keyword extraction\n",
    "nlp = spacy.load(\"en_core_web_sm\")\n",
    "\n",
    "# Initialize VADER sentiment analyzer\n",
    "sia = SentimentIntensityAnalyzer()\n",
    "\n",
    "def extract_keywords(text, top_n=5):\n",
    "    \"\"\"Extract keywords from text using spaCy.\"\"\"\n",
    "    doc = nlp(text)\n",
    "    keywords = [token.text for token in doc if token.is_alpha and not token.is_stop]\n",
    "    keywords = list(dict.fromkeys(keywords))  # Remove duplicates while keeping order\n",
    "    return keywords[:top_n]\n",
    "\n",
    "def analyze_sentiment(text):\n",
    "    \"\"\"Compute sentiment scores using TextBlob and VADER.\"\"\"\n",
    "    textblob_score = TextBlob(text).sentiment.polarity\n",
    "    vader_score = sia.polarity_scores(text)[\"compound\"]\n",
    "    overall_sentiment = \"Positive\" if vader_score > 0 else \"Negative\" if vader_score < 0 else \"Neutral\"\n",
    "    return {\"textblob_score\": textblob_score, \"vader_score\": vader_score, \"overall_sentiment\": overall_sentiment}\n",
    "\n",
    "def scrape_google_news(company):\n",
    "    \"\"\"Scrape news summary from Google News RSS feed.\"\"\"\n",
    "    google_news_url = f\"https://news.google.com/rss/search?q={company}\"\n",
    "    feed = feedparser.parse(google_news_url)\n",
    "    \n",
    "    if not feed.entries:\n",
    "        return \"No news found for this company.\"\n",
    "    \n",
    "    # Take the first article's title and summary\n",
    "    title = feed.entries[0].title\n",
    "    summary = feed.entries[0].summary\n",
    "    \n",
    "    return f\"Title: {title}\\nSummary: {summary}\"\n",
    "\n",
    "def text_to_speech(text):\n",
    "    \"\"\"Convert text summary to Hindi speech using gTTS.\"\"\"\n",
    "    filename = \"news_audio.mp3\"\n",
    "    tts = gTTS(text=text, lang=\"hi\", slow=False)\n",
    "    tts.save(filename)\n",
    "    return filename\n",
    "\n",
    "def sentiment_analysis_ui(company_name):\n",
    "    \"\"\"Gradio interface function to analyze sentiment and generate TTS.\"\"\"\n",
    "    news_summary = scrape_google_news(company_name)\n",
    "    sentiment = analyze_sentiment(news_summary)\n",
    "    audio_file = text_to_speech(news_summary)\n",
    "    return news_summary, sentiment, audio_file\n",
    "\n",
    "# Gradio Interface\n",
    "iface = gr.Interface(\n",
    "    fn=sentiment_analysis_ui,\n",
    "    inputs=gr.Textbox(label=\"Enter a company name\"),\n",
    "    outputs=[\n",
    "        gr.Textbox(label=\"News Summary\"),\n",
    "        gr.JSON(label=\"Sentiment Analysis\"),\n",
    "        gr.Audio(label=\"Generated Speech\")\n",
    "    ],\n",
    "    title=\"Company News Sentiment Analyzer\",\n",
    "    description=\"Enter a company name to analyze sentiment and generate speech summary.\"\n",
    ")\n",
    "\n",
    "# Launch the Gradio app\n",
    "iface.launch()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "568786af-2f33-45be-9f38-02a29be4e91b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
